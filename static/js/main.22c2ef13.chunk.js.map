{"version":3,"sources":["ThingsICareAbout.tsx","App.tsx","serviceWorker.ts","index.tsx","avatar-250.png"],"names":["items","url","icon","faShopify","name","description","faGithub","faTwitter","faLinkedin","faSteam","faDiscord","faInstagram","renderItems","item","index","id","media","fixedWidth","size","accessibilityLabel","variation","ThingsICareAbout","renderItem","App","useState","isDarkTheme","setIsDarkTheme","darkModeActions","content","onAction","useCallback","theme","colorScheme","narrowWidth","Section","style","margin","textAlign","spacing","src","Avatar","alt","title","actions","Boolean","window","location","hostname","match","ReactDOM","render","i18n","enTranslations","features","newDesignLanguage","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"uQAyBMA,EAA4B,CAChC,CACEC,IAAK,qBACLC,KAAMC,IACNC,KAAM,6BACNC,YAAa,wBAEf,CACEJ,IAAK,iCACLC,KAAMI,IACNF,KAAM,eACNC,YAAa,wBAEf,CACEJ,IAAK,kCACLC,KAAMK,IACNH,KAAM,eACNC,YAAa,yBAEf,CACEJ,IAAK,2CACLC,KAAMM,IACNJ,KAAM,eACNC,YAAa,2BAEf,CACEJ,IAAK,qCACLC,KAAMO,IACNL,KAAM,kEACNC,YAAa,wBAEf,CACEJ,IAAK,2BACLC,KAAMQ,IACNN,KAAM,WACNC,YAAa,wBAEf,CACEJ,IAAK,oCACLC,KAAMS,IACNP,KAAM,kBACNC,YAAa,2BAIXO,EAAc,SAACC,EAAuBC,GAAmB,IACtDb,EAAgCY,EAAhCZ,IAAKC,EAA2BW,EAA3BX,KAAME,EAAqBS,EAArBT,KAAMC,EAAeQ,EAAfR,YACxB,OACE,kBAAC,IAAD,CACEU,GAAID,EACJb,IAAKA,EACLe,MAAO,kBAAC,IAAD,CAAiBC,YAAU,EAACf,KAAMA,EAAMgB,KAAK,OACpDC,mBAAkB,sBAAiBlB,GACnCG,KAAMA,GAEN,4BACE,kBAAC,IAAD,CAAWgB,UAAU,UAAUhB,IAEjC,6BAAMC,KAKG,SAASgB,IACtB,OACE,kBAAC,IAAD,CACErB,MAAOA,EACPsB,WAAYV,IC3EH,SAASW,IAAO,IAAD,EACUC,oBAAS,GADnB,mBACrBC,EADqB,KACRC,EADQ,KAQtBC,EAAgC,CAAC,CACrCC,QAASH,EAAc,eAAO,eAC9BI,SAPwBC,uBACxB,kBAAMJ,GAAe,SAACD,GAAD,OAAkBA,OACvC,MAQF,OACE,kBAAC,IAAD,CAAeM,MAAO,CAAEC,YAAaP,EAAc,OAAS,UAC1D,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMQ,aAAW,GACf,kBAAC,IAAD,KACE,kBAAC,IAAOC,QAAR,KACE,yBAAKC,MAAO,CAAEC,OAAQ,OAAQC,UAAW,WACvC,kBAAC,IAAD,CAAeC,QAAQ,SACrB,yBAAKC,IAAKC,IAAQC,IAAI,WACtB,kBAAC,IAAD,CAAavB,KAAK,SAAlB,2BAIN,kBAAC,IAAOgB,QAAR,KACE,kBAAC,IAAD,CAAMQ,MAAM,0BAA0BC,QAAShB,GAC7C,kBAAC,IAAKO,QAAN,KACE,kBAACb,EAAD,UAKR,kBAAC,IAAD,kBACa,IACX,kBAAC,IAAD,CAAMpB,IAAI,gCAAV,WAFF,IAKI,IALJ,YAKkB,IAChB,kBAAC,IAAD,CAAMA,IAAI,6CAAV,UANF,QCvCU2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,CAAaC,KAAMC,EAAgBC,SAAU,CAACC,mBAAmB,IAC/D,kBAAC/B,EAAD,OAEFgC,SAASC,eAAe,SD6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBE3InBC,EAAOC,QAAU,IAA0B,wC","file":"static/js/main.22c2ef13.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  ResourceList,\n  ResourceItem,\n  TextStyle,\n} from '@shopify/polaris';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faDiscord,\n  faGithub,\n  faInstagram,\n  faLinkedin,\n  faShopify,\n  faSteam,\n  faTwitter,\n  IconDefinition,\n} from \"@fortawesome/free-brands-svg-icons\";\n\ninterface ThingICareAbout {\n  url: string,\n  icon: IconDefinition,\n  name: string,\n  description: string,\n};\n\nconst items : ThingICareAbout[] = [\n  {\n    url: 'https://shopify.ca',\n    icon: faShopify,\n    name: 'Security Incident Response',\n    description: 'This is where I work',\n  },\n  {\n    url: 'https://github.com/jonpulsifer',\n    icon: faGithub,\n    name: '@jonpulsifer',\n    description: 'This is where I code',\n  },\n  {\n    url: 'https://twitter.com/jonpulsifer',\n    icon: faTwitter,\n    name: '@jonpulsifer',\n    description: 'This is where I chirp',\n  },\n  {\n    url: 'https://www.linkedin.com/in/jonpulsifer/',\n    icon: faLinkedin,\n    name: '@jonpulsifer',\n    description: 'This is where I network',\n  },\n  {\n    url: 'https://steamcommunity.com/id/jawn',\n    icon: faSteam,\n    name: 'ùñèùñÜùñúùñì -ùñä-',\n    description: 'This is where I game',\n  },\n  {\n    url: 'https://kthx.dev/discord',\n    icon: faDiscord,\n    name: 'Evilcorp',\n    description: 'This is where I talk',\n  },\n  {\n    url: 'https://instagr.am/jonpulsifer.ca',\n    icon: faInstagram,\n    name: '@jonpulsifer.ca',\n    description: 'This is where I selfie',\n  },\n]\n\nconst renderItems = (item: ThingICareAbout, index: string) => {\n  const {url, icon, name, description} = item;\n  return (\n    <ResourceItem\n      id={index}\n      url={url}\n      media={<FontAwesomeIcon fixedWidth icon={icon} size=\"3x\" />}\n      accessibilityLabel={`Visit me at ${url}`}\n      name={name}\n    >\n      <h3>\n        <TextStyle variation=\"strong\">{name}</TextStyle>\n      </h3>\n      <div>{description}</div>\n    </ResourceItem>\n  ); \n};\n\nexport default function ThingsICareAbout() {\n  return (\n    <ResourceList\n      items={items}\n      renderItem={renderItems}\n    />\n  );\n}\n","import React, { useState, useCallback } from 'react';\nimport {\n  Card,\n  DisplayText,\n  FooterHelp,\n  Frame,\n  Layout,\n  Link,\n  Page,\n  TextContainer,\n  ThemeProvider,\n  BaseAction,\n} from '@shopify/polaris';\n\nimport Avatar from './avatar-250.png';\nimport ThingsICareAbout from './ThingsICareAbout';\n\nexport default function App() {\n  const [isDarkTheme, setIsDarkTheme] = useState(false);\n\n  const handleThemeChange = useCallback(\n    () => setIsDarkTheme((isDarkTheme) => !isDarkTheme),\n    [],\n  );\n\n  const darkModeActions: BaseAction[] = [{\n    content: isDarkTheme ? '‚òÄÔ∏è' : 'üåô',\n    onAction: handleThemeChange\n  }];\n\n  return (\n    <ThemeProvider theme={{ colorScheme: isDarkTheme ? 'dark' : 'light' }}>\n      <Frame>\n        <Page narrowWidth>\n          <Layout>\n            <Layout.Section>\n              <div style={{ margin: 'auto', textAlign: 'center' }}>\n                <TextContainer spacing=\"loose\">\n                  <img src={Avatar} alt=\"Avatar\" />\n                  <DisplayText size=\"large\">hi, i'm @jonpulsifer</DisplayText>\n                </TextContainer>\n              </div>\n            </Layout.Section>\n            <Layout.Section>\n              <Card title=\"Find me on the internet\" actions={darkModeActions}>\n                <Card.Section>\n                  <ThingsICareAbout />\n                </Card.Section>\n              </Card>\n            </Layout.Section>\n          </Layout>\n          <FooterHelp>\n            Built with{' '}\n            <Link url=\"https://polaris.shopify.com/\">\n              Polaris\n            </Link>\n            .{' '}Hosted on{' '}\n            <Link url=\"https://github.com/homelab-ng/pulsifer.ca\">\n              GitHub\n            </Link>.\n          </FooterHelp>\n        </Page>\n      </Frame>\n    </ThemeProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {AppProvider} from '@shopify/polaris';\nimport enTranslations from '@shopify/polaris/locales/en.json';\nimport '@shopify/polaris/dist/styles.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <AppProvider i18n={enTranslations} features={{newDesignLanguage: true}}>\n    <App />\n  </AppProvider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/avatar-250.996097e4.png\";"],"sourceRoot":""}